{
  "hash": "8dc5ee34be006adbb495e11acb94d80a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"2.1. Model sculpting and interpretation - compas\"\ndate: last-modified\neditor_options: \n  chunk_output_type: inline\n---\n\n\n# Note\n\nThe following scripts need to be run first before knitting the document \ncorresponding to `model_type` specified below:\n\n- 3_model_sculpt_compas.R\n- [Sculpting - Main models chunk](#main-models) \n  (need to manually run in the interactive mode, not run during knitting as\n  it takes some time)\n\n# Setup and load\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(stringr)\nsource(here::here(\"R/0_setup.R\"))\n\ntheme_set(theme_bw(base_size = 12))\n\ntheme_facets <- theme(\n  text = element_text(size = 16),\n  legend.position = \"inside\",\n  legend.position.inside = c(0.85, 0.27), \n  legend.background = element_rect(colour = \"black\"), \n  legend.title = element_blank()\n)\n\ntheme_single <- theme(text = element_text(size = 16))\n\n# Function to check if the model is trained\nload_model_if_trained <- function(model_type) {\n  model_path <- file.path(storage_folder, sname(paste0(model_type, \"-fit_final.rds\")))\n  if(file.exists(model_path)) {\n    load_results(sname(paste0(model_type, \"-fit_final.rds\")))\n  } else {\n    stop(paste0(\"Model \", model_type, \" is not trained for compas, `\",\n                model_path, \"` does not exist. \",\n                \"Please train it first with: \",\n                \"`Rscript R/2_train_models.R \", model_type, \" compas FALSE`\"))\n  }\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# set dataset (any with discrete response)\ndataset <- \"compas\"\n\n# set model_type\nmodel_type = \"xgb_bayes\"\n# model_type = \"xgb\"\n\n# set nr of features for a polished model\ntop_k <- 3\n\n# util function for storage\nsname <- function(x, prefix = dataset) {\n  paste0(prefix, \"-\", x)\n}\n\n# logit functions\nlogit <- function(x) log(x / (1-x))\ninv.logit <- function(x) 1 / (1 + exp(-x))\n\n\n# load dataset\ndd <- define_data(dataset)\n\n# load xgb\nxgb <- load_model_if_trained(model_type)\nxgb_fo <- load_model_if_trained(\"xgb_1_order_bayes\")\n\n# get product marginals\npm <- sample_marginals(dd$data$train[dd$covariates$all], n = 1e4, seed = 1234)\n```\n:::\n\n\n# xgb model\n\n## Sculpting\n\n### Main models\n\nSculpting on product marginals on logit scale.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# # get rough model - on pm\n# # Already generated in 3_model_sculpt_compas.R\n# rs_pm <- sculpt_rough(\n#   pm,\n#   seed = 1234,\n#   model_predict_fun = function(x) {\n#     p <- predict(xgb, new_data = x, type = \"prob\")$.pred_1\n#     logit(p)\n#   }\n# )\n\n\n# # detailed model on pm\n# Already generated in 3_model_sculpt_compas.R\n# ds_pm <- sculpt_detailed_gam(rs_pm)\n\n## Below we use custom smoother for even better fitting smoothings\ngam_cgam_smoother <- function(x, y, is_discrete, column_name, na_ind = NULL) {\n  use_cgam <- TRUE\n  if (column_name == \"age\") {\n    s.decr <- cgam::s.decr\n    form <- y ~ s.decr(x, numknots = 3)\n  } else if (column_name == \"priors\") {\n    s.incr <- cgam::s.incr\n    form <- y ~ s.incr(x, numknots = 3)\n  } else if (column_name == \"juvenile_crimes\") {\n    return(getPAVAest(outcome = y, score = x)) # from stats4phc\n  } else {\n    use_cgam <- FALSE\n  }\n  if (use_cgam) {\n    tryCatch(\n      cgam::cgam(form), \n      error = function(e) {\n        s <- mgcv::s\n        tryCatch(\n          mgcv::gam(y ~ s(x, k = -1)),\n          error = function(e) {\n            mgcv::gam(y ~ x)\n          }\n        )\n      }\n    )\n  } else {\n    if (is_discrete) {\n      s <- mgcv::s\n      tryCatch(\n        mgcv::gam(y ~ x),\n        error = function(e) {\n          lm(y ~ 0)\n        }\n      )\n    } else {\n      s <- mgcv::s\n      tryCatch(\n        mgcv::gam(y ~ s(x, k = -1)),\n        error = function(e) {\n          mgcv::gam(y ~ x)\n        }\n      )\n    }\n  }\n}\n\ngam_cgam_predict <- function(smoother, new_x, is_discrete, column_name, na_ind = NULL) {\n  if (inherits(smoother, \"cgam\")) {\n    # cgam fails on extrapolation - need to do this manually\n    if (min(new_x) < min(smoother$xmat0[, 1])) {\n      new_x[new_x < min(smoother$xmat0[, 1])] <- min(smoother$xmat0[, 1])\n    }\n    if (max(new_x) > max(smoother$xmat0[, 1])) {\n      new_x[new_x > max(smoother$xmat0[, 1])] <- max(smoother$xmat0[, 1])\n    }\n    newdata <- data.frame(x = new_x)\n    predict(smoother, newData = newdata)$fit\n  } else if (inherits(smoother, \"gam\")) {\n    newdata <- data.frame(x = new_x)\n    as.numeric(predict(smoother, newdata = newdata))\n  } else if (is.data.frame(smoother)) {\n    # specific for pava as there is no model returned, just a vector\n    ifelse(\n      new_x == 0, \n      smoother$estimate[smoother$score == 0][1],\n      ifelse(\n        new_x == 1, \n        smoother$estimate[smoother$score == 1][1],\n        smoother$estimate[smoother$score == 2][1]\n      )\n    )\n  }\n}\n\n\npolished_smoother <- function(x, y, is_discrete, column_name, na_ind = NULL) {\n  if (column_name == \"age\") {\n    s.decr <- cgam::s.decr\n    form <- y ~ s.decr(x, numknots = 3)\n  } else if (column_name == \"priors\") {\n    s.incr <- cgam::s.incr\n    form <- y ~ s.incr(x, numknots = 3)\n  } else if (column_name == \"juvenile_crimes\") {\n    return(getPAVAest(outcome = y, score = x)) # from stats4phc\n  } else {\n    out <- list()\n    class(out) <- \"constant\"\n    return(out)\n  }\n  tryCatch(\n    cgam::cgam(form), \n    error = function(e) {\n      s <- mgcv::s\n      tryCatch(\n        mgcv::gam(y ~ s(x, k = -1)),\n        error = function(e) {\n          mgcv::gam(y ~ x)\n        }\n      )\n    }\n  )\n}\n\npolished_smoother_predict <- function(smoother, new_x, is_discrete, column_name, na_ind = NULL) {\n  if (inherits(smoother, \"cgam\")) {\n    # cgam fails on extrapolation - need to do this manually\n    if (min(new_x) < min(smoother$xmat0[, 1])) {\n      new_x[new_x < min(smoother$xmat0[, 1])] <- min(smoother$xmat0[, 1])\n    }\n    if (max(new_x) > max(smoother$xmat0[, 1])) {\n      new_x[new_x > max(smoother$xmat0[, 1])] <- max(smoother$xmat0[, 1])\n    }\n    newdata <- data.frame(x = new_x)\n    predict(smoother, newData = newdata)$fit\n  } else if (inherits(smoother, \"constant\")) { \n    0\n  } else if (is.data.frame(smoother)) {\n    # specific for pava as there is no model returned, just a vector\n    ifelse(\n      new_x == 0, \n      smoother$estimate[smoother$score == 0][1],\n      ifelse(\n        new_x == 1, \n        smoother$estimate[smoother$score == 1][1],\n        smoother$estimate[smoother$score == 2][1]\n      )\n    )\n  }\n}\n\nrs_pm <- load_results(paste0(dataset, \"-\", model_type, \"-sculpt_rough_pm.rds\"))\n\nds_pm_v2 <- sculpt_detailed_generic(\n  rs = rs_pm,\n  smoother_fit = gam_cgam_smoother, \n  smoother_predict = gam_cgam_predict\n)\n\n# Select variables for polished model\ncheckmate::assert_number(top_k, lower = 1)\nvars <- levels(attr(rs_pm, \"cumul_R2\")$feature)[1:top_k]\n\nrs_pm_top_k <- rs_pm[vars]\nattr(rs_pm_top_k, \"offset\") <- attr(rs_pm, \"offset\")\nclass(rs_pm_top_k) <- class(rs_pm)\n\nps_pm_v2 <- sculpt_detailed_generic(\n  rs = rs_pm_top_k,\n  smoother_fit = polished_smoother, \n  smoother_predict = polished_smoother_predict\n)\n\nstore_results(ds_pm_v2, paste0(dataset, \"-\", model_type, \"-sculpt_detailed_pm_v2.rds\"))\nstore_results(ps_pm_v2, paste0(dataset, \"-\", model_type, \"-sculpt_polished_pm_v2.rds\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# load sculpted models\nrs_pm <- load_results(paste0(dataset, \"-\", model_type, \"-sculpt_rough_pm.rds\"))\nds_pm <- load_results(paste0(dataset, \"-\", model_type, \"-sculpt_detailed_pm.rds\"))\nps_pm <- load_results(paste0(dataset, \"-\", model_type, \"-sculpt_polished_pm.rds\"))\nds_pm_v2 <- load_results(paste0(dataset, \"-\", model_type, \"-sculpt_detailed_pm_v2.rds\"))\nps_pm_v2 <- load_results(paste0(dataset, \"-\", model_type, \"-sculpt_polished_pm_v2.rds\"))\n```\n:::\n\n\n\n### Other sculpting models \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# get rough model - on train\nrs_train <- sculpt_rough(\n  dd$data$train[dd$covariates$all],\n  seed = 1234,\n  model_predict_fun = function(x) {\n    p <- predict(xgb, new_data = x, type = \"prob\")$.pred_1\n    logit(p)\n  },\n  data_as_marginals = TRUE\n)\n\n# rough model on pm on original scale\nrs_pm_prob <- sculpt_rough(\n  pm,\n  seed = 1234,\n  model_predict_fun = function(x) {\n    predict(xgb, new_data = x, type = \"prob\")$.pred_1\n  }\n)\n\n# rough model on train on original scale\nrs_train_prob <- sculpt_rough(\n  dd$data$train[dd$covariates$all],\n  seed = 1234,\n  model_predict_fun = function(x) {\n    predict(xgb, new_data = x, type = \"prob\")$.pred_1\n  },\n  data_as_marginals = TRUE\n)\n\n# First order model\nrs_pm_xgb_fo <- sculpt_rough(\n  pm, \n  seed = 1234,\n  model_predict_fun = function(x) {\n    p <- predict(xgb_fo, new_data = x, type = \"prob\")$.pred_1\n    logit(p)\n  }\n)\n```\n:::\n\n\n\n## ICE plots\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscale_col_update <- \n  scale_color_manual(\n    values = c(\"ICE Profiles\" = \"gray60\", \"Rough model (with SE)\" = \"blue\"),\n    labels = c(\"ICE Profiles\", \"Rough model\"),\n    name = \"\"\n  )\n\nice_pm_ceteris <- g_ice(rs_pm, centered = F, show_PDP = F, \n                        facet_spec = facet_specification(ncol = 3))\nice_pm_ceteris_prob <- g_ice(rs_pm_prob, centered = F, show_PDP = F, \n                             facet_spec = facet_specification(ncol = 3))\nice_pm <- g_ice(rs_pm, centered = T, show_PDP = T, \n                facet_spec = facet_specification(ncol = 3))\n```\n:::\n\n\n\n::: {.panel-tabset}\n\n### Rough: Logit scale\n\n\n::: {.cell}\n\n```{.r .cell-code}\nice_pm_ceteris$continuous + theme_facets\n```\n\n::: {.cell-output-display}\n![](2_1_modsculpt_compas_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nice_pm_ceteris$discrete\n```\n\n::: {.cell-output-display}\n![](2_1_modsculpt_compas_files/figure-html/unnamed-chunk-8-1.png){width=384}\n:::\n:::\n\n\n### Rough: Prob. scale\n\n\n::: {.cell}\n\n```{.r .cell-code}\nice_pm_ceteris_prob$continuous + theme_facets\n```\n\n::: {.cell-output-display}\n![](2_1_modsculpt_compas_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nice_pm_ceteris_prob$discrete\n```\n\n::: {.cell-output-display}\n![](2_1_modsculpt_compas_files/figure-html/unnamed-chunk-10-1.png){width=384}\n:::\n:::\n\n\n### Rough: Logit, centered\n\n\n::: {.cell}\n\n```{.r .cell-code}\nice_pm$continuous + scale_col_update + theme_facets\n```\n\n::: {.cell-output-display}\n![](2_1_modsculpt_compas_files/figure-html/unnamed-chunk-11-1.png){width=768}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nice_pm$discrete + scale_col_update\n```\n\n::: {.cell-output-display}\n![](2_1_modsculpt_compas_files/figure-html/unnamed-chunk-12-1.png){width=576}\n:::\n:::\n\n\n### Rough vs direct 1st order\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# comparison plot\ncomp_xgb_bayes <- g_comparison(\n  sculptures = list(rs_pm, rs_pm_xgb_fo),\n  descriptions = c(\"Rough Model\", \"Direct Additive XGB\"), \n  facet_spec = facet_specification(ncol = 3)\n)\n\ncomp_xgb_bayes$continuous + theme_facets\n```\n\n::: {.cell-output-display}\n![](2_1_modsculpt_compas_files/figure-html/unnamed-chunk-13-1.png){width=768}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncomp_xgb_bayes$discrete\n```\n\n::: {.cell-output-display}\n![](2_1_modsculpt_compas_files/figure-html/unnamed-chunk-14-1.png){width=576}\n:::\n:::\n\n\n### Detailed vs rough\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# compare detailed and rough\ncomp_ds <- \n  g_comparison(\n    sculptures = list(rs_pm, ds_pm_v2),\n    descriptions = c(\"Rough Model\", \"Detailed Model\"), \n    facet_spec = facet_specification(ncol = 3)\n  )\n\ncomp_ds$continuous + theme_facets\n```\n\n::: {.cell-output-display}\n![](2_1_modsculpt_compas_files/figure-html/unnamed-chunk-15-1.png){width=768}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncomp_ds$discrete\n```\n\n::: {.cell-output-display}\n![](2_1_modsculpt_compas_files/figure-html/unnamed-chunk-16-1.png){width=576}\n:::\n:::\n\n\n\n### Polished vs rough\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# compare detailed and rough\n## Select variables for polished model\ncheckmate::assert_number(top_k, lower = 1)\nvars <- levels(attr(rs_pm, \"cumul_R2\")$feature)[1:top_k]\n\nrs_pm_top_k <- rs_pm[vars]\nattr(rs_pm_top_k, \"offset\") <- attr(rs_pm, \"offset\")\nclass(rs_pm_top_k) <- class(rs_pm)\n\ncomp_ps <- \n  g_comparison(\n    sculptures = list(rs_pm_top_k, ps_pm_v2),\n    descriptions = c(\"Rough Model\", \"Polished Model\"), \n    facet_spec = facet_specification(ncol = 3)\n  )\n\ncomp_ps$continuous + theme_facets\n```\n\n::: {.cell-output-display}\n![](2_1_modsculpt_compas_files/figure-html/unnamed-chunk-17-1.png){width=768}\n:::\n:::\n\n\n:::\n\n## Data density\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng_density_plots_cont <- g_density_ice_plot_list(ps_pm_v2,\n                                                dd$data$train,\n                                                var_names = dd$covariates$continuous,\n                                                var_labels = dd$covariates$labels,\n                                                task = dd$task)\n# patchwork::wrap_plots(g_density_plots_cont[c(\"priors\", \"age\", \"juvenile_crimes\")], ncol = 2) \n```\n:::\n\n\n\n::: {.panel-tabset}\n\n### priors\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng_density_plots_cont[[\"priors\"]]\n```\n\n::: {.cell-output-display}\n![](2_1_modsculpt_compas_files/figure-html/unnamed-chunk-19-1.png){width=480}\n:::\n:::\n\n\n### age\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng_density_plots_cont[[\"age\"]]\n```\n\n::: {.cell-output-display}\n![](2_1_modsculpt_compas_files/figure-html/unnamed-chunk-20-1.png){width=480}\n:::\n:::\n\n\n### juvenile_crimes\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng_density_plots_cont[[\"juvenile_crimes\"]]\n```\n\n::: {.cell-output-display}\n![](2_1_modsculpt_compas_files/figure-html/unnamed-chunk-21-1.png){width=480}\n:::\n:::\n\n:::\n\n## Additivity evaluation\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- predict(xgb, new_data = pm, type = \"prob\")$.pred_1\np2 <- predict(xgb, new_data = dd$data$train, type = \"prob\")$.pred_1\np3 <- predict(rs_pm, pm)\np4 <- predict(rs_train, dd$data$train)\n\ng_additivity(\n  sp = list(inv.logit(p3), inv.logit(p4)),\n  lp = list(p1, p2),\n  descriptions = c(\"Product Marginals\", \"Train Set\")\n) + \n    labs(x = \"Rough Model Predictions\", y = \"Strong Learner Predictions\") + \n    theme_single\n```\n\n::: {.cell-output-display}\n![](2_1_modsculpt_compas_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n## Variable importance\n\n::: {.panel-tabset}\n\n\n### Logit scale, pm\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvi_pm <- g_var_imp(rs_pm, show_pdp_plot = FALSE, textsize = 16, var_imp_type = \"ice\", \n                   logodds_to_prob = F)\nplot(vi_pm)\n```\n\n::: {.cell-output-display}\n![](2_1_modsculpt_compas_files/figure-html/unnamed-chunk-23-1.png){width=864}\n:::\n:::\n\n\n### Prob scale, pm\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvi_pm_prob <- g_var_imp(rs_pm, show_pdp_plot = FALSE, textsize = 16, var_imp_type = \"ice\", \n                        logodds_to_prob = T)\nplot(vi_pm_prob)\n```\n\n::: {.cell-output-display}\n![](2_1_modsculpt_compas_files/figure-html/unnamed-chunk-24-1.png){width=864}\n:::\n:::\n\n\n### Logit scale, train\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvi_train <- g_var_imp(rs_train, show_pdp_plot = FALSE, textsize = 16, var_imp_type = \"ice\", \n                      logodds_to_prob = F)\nplot(vi_train)\n```\n\n::: {.cell-output-display}\n![](2_1_modsculpt_compas_files/figure-html/unnamed-chunk-25-1.png){width=864}\n:::\n:::\n\n\n### Prob scale, train\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvi_train_prob <- g_var_imp(rs_train, show_pdp_plot = FALSE, textsize = 16, var_imp_type = \"ice\", \n                           logodds_to_prob = T)\nplot(vi_train_prob)\n```\n\n::: {.cell-output-display}\n![](2_1_modsculpt_compas_files/figure-html/unnamed-chunk-26-1.png){width=864}\n:::\n:::\n\n\n:::\n\n## Calibration\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreds_sculptures <- tibble(\n  obs = as.numeric(as.character(dd$data$holdout[[dd$response]])),\n  obs_fct = factor(dd$data$holdout[[dd$response]], levels = c(\"0\", \"1\")),\n  xgb_prob = predict(xgb, new_data = dd$data$holdout, type = \"prob\")$.pred_1,\n  rm_log = predict(rs_pm, newdata = dd$data$holdout),\n  pm_log = predict(ps_pm_v2, newdata = dd$data$holdout),\n  dir_prob = predict(xgb_fo, new_data = dd$data$holdout, type = \"prob\")$.pred_1\n) %>%\n  mutate(\n    rm_prob = inv.logit(rm_log),\n    pm_prob = inv.logit(pm_log)\n  ) %>%\n  pivot_longer(\n    cols = -c(obs, obs_fct),\n    names_to = c(\"Model\", \"type\"), names_sep = \"_\",\n    values_to = \"pred\"\n  ) %>%\n  filter(type == \"prob\") %>% \n  mutate(\n    Model = c(\n      \"xgb\" = \"XGBoost\", \"rm\" = \"Rough Model\",\n      \"pm\" = \"Polished Model\", \"dir\" = \"Direct Additive XGBoost\"\n    )[Model],\n    Model = factor(\n      Model, \n      levels = c(\n        \"XGBoost\", \"Rough Model\", \"Polished Model\", \"Direct Additive XGBoost\"\n      )\n    )\n  )\n\ncalib_plot_sculptures <- ggplot(preds_sculptures) + \n  geom_smooth(aes(x = pred, y = obs, colour = Model), se = F, method = \"gam\", formula = y~x, \n              method.args = list(family = \"binomial\")) + \n  geom_abline(linetype = \"dashed\") + \n  labs(x = \"Prediction\", y = \"Truth\") + \n  theme_bw() + \n  theme(text = element_text(size = 18))\n\ncalib_plot_sculptures\n```\n\n::: {.cell-output-display}\n![](2_1_modsculpt_compas_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n\n## Predictiveness curve\n\nThe plot was generated using the `riskProfile` function from the \n[`stats4phc`](https://genentech.github.io/stats4phc/main/index.html) package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrp <- riskProfile(\n  outcome = as.numeric(as.character(dd$data$holdout[[dd$response]])),\n  score = inv.logit(predict(ps_pm_v2, dd$data$holdout)),\n  show.nonparam.pv = FALSE,\n  show.best.pv = FALSE\n)\n\ndm_corel <- define_model(\"corel_publication\", dd)\npreds_corel <- predict(dm_corel$workflow, new_data = dd$data$holdout)$.pred_class\npreds_corel_fct <- factor(preds_corel, levels = c(\"1\", \"0\"))\n\ndat_corel <- tibble(\n  score_percentile = 1 - mean(preds_corel),\n  PPV = ppv_vec(\n    truth = dd$data$holdout[[dd$response]], \n    estimate = preds_corel_fct, \n    event_level = \"first\"\n  ),\n  `1-NPV` = 1 - npv_vec(\n    truth = dd$data$holdout[[dd$response]], \n    estimate = preds_corel_fct, \n    event_level = \"first\"\n  )\n) %>% pivot_longer(cols = c(PPV, `1-NPV`))\n\n# final Predictiveness curve with corel alg.\npc_plot <- \n  rp$plot + \n  geom_point(\n    data = dat_corel,\n    mapping = aes(x = score_percentile, y = value, colour = name),\n    size = 3\n  )\n\n\nplot(pc_plot)\n```\n\n::: {.cell-output-display}\n![](2_1_modsculpt_compas_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Below are to generate separate legends for slides\n# plot(rp$plot + labs(color = \"Predictive Quantity\\n(Polished model)\"))\n# clrs <- stats4phc:::predictionColours(c(\"PC\", \"PPV\", \"1-NPV\"), show.best = FALSE)\n# p <- p + scale_colour_manual(values = clrs, breaks = names(clrs))\n# ggplot(dat_corel, aes(x = score_percentile, y = value, colour = name)) + \n#   geom_point(size = 3) + \n#   scale_colour_manual(values = clrs, breaks = names(clrs)) + \n#   labs(color = \"Predictive Quantity\\n(CORELS)\") \n```\n:::\n\n\n\n# Compare with linear models\n\n## Load and sculpt\n\n\n::: {.cell}\n\n```{.r .cell-code}\nelastic <- load_model_if_trained(\"log_elastic\")\nlasso <- load_model_if_trained(\"log_lasso\")\nridge <- load_model_if_trained(\"log_ridge\")\n\ndm_linm <- define_model(type = \"logistic\", data_info = dd)\nlinm <- fit(dm_linm$workflow, data = dd$data$train)\ntg_linm <- fit_resamples(dm_linm$workflow, dd$cv)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# sculptures on pm from different models\nrs_pm_elastic <- sculpt_rough(\n  pm,\n  seed = 1234,\n  model_predict_fun = function(x) {\n    p <- predict(elastic, new_data = x, type = \"prob\")$.pred_1\n    logit(p)\n  }\n)\nrs_pm_lasso <- sculpt_rough(\n  pm,\n  seed = 1234,\n  model_predict_fun = function(x) {\n    p <- predict(lasso, new_data = x, type = \"prob\")$.pred_1\n    logit(p)\n  }\n)\nrs_pm_ridge <- sculpt_rough(\n  pm,\n  seed = 1234,\n  model_predict_fun = function(x) {\n    p <- predict(ridge, new_data = x, type = \"prob\")$.pred_1\n    logit(p)\n  }\n)\nrs_pm_linm <- sculpt_rough(\n  pm,\n  seed = 1234,\n  model_predict_fun = function(x) {\n    p <- predict(linm, new_data = x, type = \"prob\")$.pred_1\n    logit(p)\n  }\n)\n```\n:::\n\n\n## ICE\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncomp_models <- g_comparison(\n  sculptures = list(rs_pm_elastic, rs_pm_lasso, rs_pm_ridge, rs_pm_linm, ps_pm_v2),\n  descriptions = c(\"Elastic Net\", \"Lasso\", \"Ridge\", \"Logistic Regression\", \"Polished\"),\n  facet_spec = facet_specification(ncol = 3)\n)\n\ncomp_models$continuous + theme_facets\n```\n\n::: {.cell-output-display}\n![](2_1_modsculpt_compas_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n\n```{.r .cell-code}\ncomp_models$discrete\n```\n\n::: {.cell-output-display}\n![](2_1_modsculpt_compas_files/figure-html/unnamed-chunk-31-2.png){width=672}\n:::\n:::\n\n\n\n\n\n## Calibration\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreds_models <- tibble(\n  obs = as.numeric(as.character(dd$data$holdout[[dd$response]])),\n  obs_fct = factor(dd$data$holdout[[dd$response]], levels = c(\"0\", \"1\")),\n  xgbPol_log = predict(ps_pm_v2, newdata = dd$data$holdout),\n  linm_log = predict(rs_pm_linm, newdata = dd$data$holdout),\n  elastic_log = predict(rs_pm_elastic, newdata = dd$data$holdout),\n  lasso_log = predict(rs_pm_lasso, newdata = dd$data$holdout),\n  ridge_log = predict(rs_pm_ridge, newdata = dd$data$holdout)\n) %>% \n  mutate(\n    xgbPol_prob = inv.logit(xgbPol_log),\n    linm_prob = inv.logit(linm_log),\n    elastic_prob = inv.logit(elastic_log),\n    lasso_prob = inv.logit(lasso_log),\n    ridge_prob = inv.logit(ridge_log)\n  ) %>%\n  pivot_longer(\n    cols = -c(obs, obs_fct),\n    names_to = c(\"Model\", \"type\"), names_sep = \"_\",\n    values_to = \"pred\"\n  ) %>%\n  filter(type == \"prob\") %>% \n  mutate(\n    Model = c(\n      \"xgbPol\" = \"Polished\", \n      \"linm\" = \"Logistic\", \"elastic\" = \"Elastic Net\", \"lasso\" = \"Lasso\", \"ridge\" = \"Ridge\" \n    )[Model]\n  )\n\n# calibration plot on holdout based on pm sculptures of different linear models\ncalib_plot_models <- ggplot(preds_models) + \n  geom_smooth(aes(x = pred, y = obs, colour = Model), se = F, method = \"gam\", formula = y~x, \n              method.args = list(family = \"binomial\")) + \n  geom_abline(linetype = \"dashed\") + \n  labs(x = \"Prediction\", y = \"Truth\") + \n  theme_bw() + \n  theme(text = element_text(size = 18))\n\ncalib_plot_models\n```\n\n::: {.cell-output-display}\n![](2_1_modsculpt_compas_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n\n# Session info\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::session_info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.3 (2024-02-29)\n os       Ubuntu 22.04.4 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Etc/UTC\n date     2024-09-13\n pandoc   3.1.13 @ /opt/conda/bin/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package      * version    date (UTC) lib source\n backports      1.4.1      2021-12-13 [2] RSPM (R 4.3.0)\n boot           1.3-30     2024-02-26 [4] RSPM (R 4.3.3)\n broom        * 1.0.5      2023-06-09 [2] RSPM (R 4.3.0)\n cachem         1.0.8      2023-05-01 [2] RSPM (R 4.3.0)\n cgam           1.21       2023-08-10 [1] RSPM (R 4.3.0)\n checkmate      2.3.1      2023-12-04 [2] RSPM (R 4.3.0)\n class          7.3-22     2023-05-03 [2] RSPM (R 4.3.0)\n cli            3.6.2      2023-12-11 [2] RSPM (R 4.3.0)\n codetools      0.2-20     2024-03-31 [4] RSPM (R 4.3.3)\n colorspace     2.1-0      2023-01-23 [2] RSPM (R 4.3.0)\n coneproj       1.17       2023-10-15 [1] RSPM (R 4.3.0)\n data.table     1.15.4     2024-03-30 [2] RSPM (R 4.3.0)\n devtools       2.4.5      2022-10-11 [1] RSPM (R 4.3.0)\n dials        * 1.2.1      2024-02-22 [1] RSPM (R 4.3.0)\n DiceDesign     1.10       2023-12-07 [1] RSPM (R 4.3.0)\n digest         0.6.35     2024-03-11 [2] RSPM (R 4.3.0)\n dplyr        * 1.1.4      2023-11-17 [2] RSPM (R 4.3.0)\n ellipsis       0.3.2      2021-04-29 [2] RSPM (R 4.3.0)\n evaluate       0.23       2023-11-01 [2] RSPM (R 4.3.0)\n fansi          1.0.6      2023-12-08 [2] RSPM (R 4.3.0)\n farver         2.1.1      2022-07-06 [2] RSPM (R 4.3.0)\n fastmap        1.1.1      2023-02-24 [2] RSPM (R 4.3.0)\n foreach        1.5.2      2022-02-02 [1] RSPM (R 4.3.0)\n fs             1.6.3      2023-07-20 [2] RSPM (R 4.3.0)\n furrr          0.3.1      2022-08-15 [1] RSPM (R 4.3.0)\n future         1.33.2     2024-03-26 [1] RSPM (R 4.3.0)\n future.apply   1.11.2     2024-03-28 [1] RSPM (R 4.3.0)\n generics       0.1.3      2022-07-05 [2] RSPM (R 4.3.0)\n ggplot2      * 3.5.0      2024-02-23 [2] RSPM (R 4.3.0)\n ggrepel        0.9.5      2024-01-10 [1] RSPM (R 4.3.0)\n glmnet         4.1-8      2023-08-22 [1] RSPM (R 4.3.0)\n globals        0.16.3     2024-03-08 [1] RSPM (R 4.3.0)\n glue           1.7.0      2024-01-09 [2] RSPM (R 4.3.0)\n gower          1.0.1      2022-12-22 [1] RSPM (R 4.3.0)\n GPfit          1.0-8      2019-02-08 [1] RSPM (R 4.3.0)\n gridExtra      2.3        2017-09-09 [2] RSPM (R 4.3.0)\n gtable         0.3.4      2023-08-21 [2] RSPM (R 4.3.0)\n hardhat        1.3.1      2024-02-02 [1] RSPM (R 4.3.0)\n here           1.0.1      2020-12-13 [1] RSPM (R 4.3.0)\n htmltools      0.5.8.1    2024-04-04 [2] RSPM (R 4.3.0)\n htmlwidgets    1.6.4      2023-12-06 [2] RSPM (R 4.3.0)\n httpuv         1.6.15     2024-03-26 [2] RSPM (R 4.3.0)\n infer        * 1.0.7      2024-03-25 [1] RSPM (R 4.3.0)\n ipred          0.9-14     2023-03-09 [1] RSPM (R 4.3.0)\n iterators      1.0.14     2022-02-05 [1] RSPM (R 4.3.0)\n jsonlite       1.8.8      2023-12-04 [2] RSPM (R 4.3.0)\n knitr          1.46       2024-04-06 [2] RSPM (R 4.3.0)\n labeling       0.4.3      2023-08-29 [2] RSPM (R 4.3.0)\n later          1.3.2      2023-12-06 [2] RSPM (R 4.3.0)\n lattice        0.22-6     2024-03-20 [4] RSPM (R 4.3.3)\n lava           1.8.0      2024-03-05 [1] RSPM (R 4.3.0)\n lhs            1.1.6      2022-12-17 [1] RSPM (R 4.3.0)\n lifecycle      1.0.4      2023-11-07 [2] RSPM (R 4.3.0)\n listenv        0.9.1      2024-01-29 [1] RSPM (R 4.3.0)\n lme4           1.1-35.2   2024-03-28 [2] RSPM (R 4.3.0)\n lubridate      1.9.3      2023-09-27 [2] RSPM (R 4.3.0)\n magrittr       2.0.3      2022-03-30 [2] RSPM (R 4.3.0)\n MASS           7.3-60.0.1 2024-01-13 [4] RSPM (R 4.3.3)\n Matrix         1.6-5      2024-01-11 [4] RSPM (R 4.3.3)\n memoise        2.0.1      2021-11-26 [2] RSPM (R 4.3.0)\n mgcv         * 1.9-1      2023-12-21 [4] RSPM (R 4.3.3)\n mime           0.12       2021-09-28 [2] RSPM (R 4.3.0)\n miniUI         0.1.1.1    2018-05-18 [2] RSPM (R 4.3.0)\n minqa          1.2.6      2023-09-11 [2] RSPM (R 4.3.0)\n modeldata    * 1.3.0      2024-01-21 [1] RSPM (R 4.3.0)\n modsculpt    * 0.1.1      2024-09-13 [1] Github (Genentech/modsculpt@426ffec)\n munsell        0.5.1      2024-04-01 [2] RSPM (R 4.3.0)\n nlme         * 3.1-164    2023-11-27 [4] RSPM (R 4.3.3)\n nloptr         2.0.3      2022-05-26 [2] RSPM (R 4.3.0)\n nnet           7.3-19     2023-05-03 [4] RSPM (R 4.3.3)\n parallelly     1.37.1     2024-02-29 [1] RSPM (R 4.3.0)\n parsnip      * 1.2.1      2024-03-22 [1] RSPM (R 4.3.0)\n pillar         1.9.0      2023-03-22 [2] RSPM (R 4.3.0)\n pkgbuild       1.4.4      2024-03-17 [2] RSPM (R 4.3.0)\n pkgconfig      2.0.3      2019-09-22 [2] RSPM (R 4.3.0)\n pkgload        1.3.4      2024-01-16 [2] RSPM (R 4.3.0)\n pracma         2.4.4      2023-11-10 [1] RSPM (R 4.3.0)\n prodlim        2023.08.28 2023-08-28 [1] RSPM (R 4.3.0)\n profvis        0.3.8      2023-05-02 [1] RSPM (R 4.3.0)\n promises       1.3.0      2024-04-05 [2] RSPM (R 4.3.0)\n purrr        * 1.0.2      2023-08-10 [2] RSPM (R 4.3.0)\n R6             2.5.1      2021-08-19 [2] RSPM (R 4.3.0)\n Rcpp           1.0.12     2024-01-09 [2] RSPM (R 4.3.0)\n recipes      * 1.0.10     2024-02-18 [1] RSPM (R 4.3.0)\n remotes        2.5.0      2024-03-17 [2] RSPM (R 4.3.0)\n rlang          1.1.3      2024-01-10 [2] RSPM (R 4.3.0)\n rmarkdown      2.26       2024-03-05 [2] RSPM (R 4.3.0)\n rpart          4.1.23     2023-12-05 [4] RSPM (R 4.3.3)\n rprojroot      2.0.4      2023-11-05 [2] RSPM (R 4.3.0)\n rsample      * 1.2.1      2024-03-25 [1] RSPM (R 4.3.0)\n rstudioapi     0.16.0     2024-03-24 [2] RSPM (R 4.3.0)\n scales       * 1.3.0      2023-11-28 [2] RSPM (R 4.3.0)\n sessioninfo    1.2.2      2021-12-06 [1] RSPM (R 4.3.0)\n shape          1.4.6.1    2024-02-23 [1] RSPM (R 4.3.0)\n shiny          1.8.1.1    2024-04-02 [2] RSPM (R 4.3.0)\n statmod        1.5.0      2023-01-06 [1] RSPM (R 4.3.0)\n stats4phc    * 0.1.1      2024-06-20 [1] Github (genentech/stats4phc@e868e23)\n stringi        1.8.3      2023-12-11 [2] RSPM (R 4.3.0)\n stringr      * 1.5.1      2023-11-14 [2] RSPM (R 4.3.0)\n survival       3.5-8      2024-02-14 [4] RSPM (R 4.3.3)\n svDialogs      1.1.0      2022-05-10 [1] RSPM (R 4.3.0)\n svGUI          1.0.1      2021-04-16 [1] RSPM (R 4.3.0)\n tibble       * 3.2.1      2023-03-20 [2] RSPM (R 4.3.0)\n tidymodels   * 1.2.0      2024-03-25 [1] RSPM (R 4.3.0)\n tidyr        * 1.3.1      2024-01-24 [2] RSPM (R 4.3.0)\n tidyselect     1.2.1      2024-03-11 [2] RSPM (R 4.3.0)\n timechange     0.3.0      2024-01-18 [2] RSPM (R 4.3.0)\n timeDate       4032.109   2023-12-14 [1] RSPM (R 4.3.0)\n tune         * 1.2.0      2024-03-20 [1] RSPM (R 4.3.0)\n urlchecker     1.0.1      2021-11-30 [1] RSPM (R 4.3.0)\n usethis        2.2.2      2023-07-06 [1] RSPM (R 4.3.0)\n utf8           1.2.4      2023-10-22 [2] RSPM (R 4.3.0)\n vctrs          0.6.5      2023-12-01 [2] RSPM (R 4.3.0)\n viridisLite    0.4.2      2023-05-02 [2] RSPM (R 4.3.0)\n withr          3.0.0      2024-01-16 [2] RSPM (R 4.3.0)\n workflows    * 1.1.4      2024-02-19 [1] RSPM (R 4.3.0)\n workflowsets * 1.1.0      2024-03-21 [1] RSPM (R 4.3.0)\n xfun           0.43       2024-03-25 [4] RSPM (R 4.3.3)\n xgboost        1.7.7.1    2024-01-25 [1] RSPM (R 4.3.0)\n xtable         1.8-4      2019-04-21 [2] RSPM (R 4.3.0)\n yaml           2.3.8      2023-12-11 [2] RSPM (R 4.3.0)\n yardstick    * 1.3.1      2024-03-21 [1] RSPM (R 4.3.0)\n\n [1] /home/yoshidk6/R/x86_64-pc-linux-gnu-library/4.3\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n",
    "supporting": [
      "2_1_modsculpt_compas_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}